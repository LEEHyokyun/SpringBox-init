ㅁ Spring legacy(mvc) vs Spring Boot
	ㅁ 직접 설정
		* component scan -> IOC, DI(DL)
		* SpringMVC -> DispatcherServlet
		* EncdoingFilter 설정
		* mvc anntation driven 설정
		* dbcp, Mybatis 연동 설정
		* Test를 위한 junit
		* Security 설정
	ㅁ 자동설정
	
	ㅁ xml + annotation / java config + annotation, 외부 WAS
	ㅁ properties(yaml) + javaconfig + annoatation, WAS 내장
	

ㅁ Thymeleaf
	ㅁ html과 구조는 동일하나, 검색어에 따라 data(content)를 다르게 전송하기 위한 구조이자 방법이다.
	ㅁ 정적인 웹문서(틀, 조형물)를 생성하여 동적으로 data를 전송 및 보여주는 template Engine
		ㄴ legacy에서는 jsp, spring boot에서는 thymeleaf이다.
	ㅁ 이외 boot에서 free maker, mustache, groovy 등을 이용하지만 thymeleaf를 가장 권장.
	ㅁ 기존 HTML 로직을 변경하지 않고 개발할 수 있고, 이에 따라 유지보수성이 높은 템플릿을 제공한다.
		ㄴ natural Templates
	ㅁ src/main/resources의 template에서 html 생성(Controller 요청), 이외 정적인 파일(resources)들은 static에 배치
	ㅁ 정적파일은 동적파일(WAS 및 Controller 거침)과 달리, WAS를 거치지 않고 절대적 경로를 통해 전달되는 자원이자 자료이다.
		ㄴ 따라서 디자인 팀과 협력을 할 경우, Open with> web을 통해 바로 확인이 가능하며 이에 따라 협력적으로 효율성이 증가한다.

※ jsp - java class로 생성되어 servlet으로 실행되는 방식 
※ thymeleaf - html 구조상에서 실행되는 방식