ㅁ Spring legacy(mvc) vs Spring Boot
	ㅁ 직접 설정
		* component scan -> IOC, DI(DL)
		* SpringMVC -> DispatcherServlet
		* EncdoingFilter 설정
		* mvc anntation driven 설정
		* dbcp, Mybatis 연동 설정
		* Test를 위한 junit
		* Security 설정
	ㅁ 자동설정
	
	ㅁ xml + annotation / java config + annotation, 외부 WAS
	ㅁ properties(yaml) + javaconfig + annoatation, WAS 내장

ㅁ junit
	ㅁ 4 버전 -> 생성자 DI 지원하지 않는다, field injection 이용
	ㅁ 5 버전 -> 생성자 DI지원, @AutoWired 명기 필요
		ㄴ spring boot 2.2ver 이상은 junit 5ver, 현 버전은 2.7 ver.
		
ㅁ Thymeleaf
	ㅁ html과 구조는 동일하나, 검색어에 따라 data(content)를 다르게 전송하기 위한 구조이자 방법이다.
	ㅁ 정적인 웹문서(틀, 조형물)를 생성하여 동적으로 data를 전송 및 보여주는 template Engine
		ㄴ legacy에서는 jsp, spring boot에서는 thymeleaf이다.
	ㅁ 이외 boot에서 free maker, mustache, groovy 등을 이용하지만 thymeleaf를 가장 권장.
	ㅁ 기존 HTML 로직을 변경하지 않고 개발할 수 있고, 이에 따라 유지보수성이 높은 템플릿을 제공한다.
		ㄴ natural Templates
	ㅁ src/main/resources의 template에서 html 생성(Controller 요청), 이외 정적인 파일(resources)들은 static에 배치
	ㅁ 정적파일은 동적파일(WAS 및 Controller 거침)과 달리, WAS를 거치지 않고 절대적 경로를 통해 전달되는 자원이자 자료이다.
		ㄴ 따라서 디자인 팀과 협력을 할 경우, Open with> web을 통해 바로 확인이 가능하며 이에 따라 협력적으로 효율성이 증가한다.
	ㅁ 주요 표현식
		* 변수 : ${}
		* 링크 url : @{}
		* 선택변수 : *{}
	※ jsp, tstl과 달리 tag를 통해 data를 전달받는다.
	
※ jsp - java class로 생성되어 servlet으로 실행되는 방식 
※ thymeleaf - html 구조상에서 실행되는 방식

ㅁ href / th:href
	* test (context path, 경로 설정)
	* context path 설정시 th:href에서 /에 path가 기입되어 해당 베이스 경로가 설정됨(유연하게 작성 가능)
	* 단 href는 context path까지 포함한 경로를 반드시 직접 작성해 주어야 한다.
	* DOM에서는 th:href만 보여지고(WAS실행), 웹 오프라인 상에서는 a href 그대로 보여진다.
		ㄴ context에 따라 유연하게 변화하는 경로는 th:href에 해당됨

ㅁ Handler Interceptor
	* DispatcherServlet에서 controller 실행 전, 후에 모든 요청과 응답을 제어한다.
		ㄴ 실행 전 : HandlerMapping로 선별, HandlerAdaptor로 실행
		ㄴ 이 실행 시점에서 공통 로직 처리
	* 컨트롤러 영역에서의 공통 관심사 처리, 가장 대표적으로 로그인 인증 여부
	* Security와 유사한 로직으로 작동 가능

ㅁ Lombok
	* setter, getter, toString 등을 어노테이션으로 간단하게 처리해주는 라이브러리, 도구
	* 어노테이션으로 getter, setter, 생성자 등을 대체하여 생성할 수 있다.
		ㄴ @Data로 생성, @AllArgsConstructor, @NoArgsConstructor 등 사용
		ㄴ outline에서 해당 객체가 생성되는 것을 확인할 수 있음
		
ㅁ Spring AOP Trancsaction

@Transactional : AOP 기반 선언적 방식의 트랜잭션 처리
	* 해당 서비스 메서드에서 error, RuntimeException(Unchecked) 계열 발생시 자동 roll back
		ㄴ Spring data 관련 Exception은 모두 java.lang.RUntimeException의 하위 Exception.
	* 문제없이 실행시 commit
	* AOP 기반 방식의 처리이므로 proxy객체가 해당 메서드에 대한 트랜잭션을 제어
	* 소프트웨어 아키텍쳐 계층(layer) 이해 
		Presentation Layer (Controller) - 어플리케이션 기능을 웹서비스로 제공
		Servie Layer(Service) - 비즈니스 로직을 캡슐화, 트랜잭션 제어
		Persistence Layer(Repository) - 데이터 엑세스(DAO)
	* DB Transaction - business logic에서 더이상 나눌 수 없는 작업의 단위
		ㄴ 데이터베이스 상태를 변경하고자 할 때 한번에 수행되어야 하는 연산
			ㄴ 예를 들어 계좌이체 -> 출금, 입금
		ㄴ ACID, 트랜잭션의 안전성을 보장하기 위한 성질
			ㄴ Atomicity : 원자성, 한 트랜잭션의 세부 연산들이 모두 성공하거나 실패하는 성질(즉 이체작업 중 문제 발생시 일괄 rollback)
			ㄴ consistency : 일관성, 트랜잭션이 성공하면 db 상태를 유지 및 해당 상태나 무결조건을 모두에게 적용하는 성질
				ㄴ 무결성 조건, 계좌 잔고 등을 위반하면 트랜잭션 중단
			ㄴ Isolation : 격리성, 트랜잭션으로 처리되는 중간에서 외부 간섭은 없어야 한다
			ㄴ Durability : 영속성, 완료된 트랜잭션(commit)은 db에서 영구보존되어야 한다